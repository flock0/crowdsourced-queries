package crowdsourced.mturk;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;


/**
 * A Human-Intelligence-Task for Amazon Mechanical Turk
 *
 * @see http://docs.aws.amazon.com/AWSMechTurk/latest/AWSMturkAPI/
 *      ApiReference_CreateHITOperation.html
 */
public class HIT {

    /**
     * The number of seconds after which a submitted assignment is approved
     * automatically. Default set to two days.
     */
    private static final int AUTO_APPROVAL_DELAY_IN_SECONDS = 60 * 60 * 24 * 2;

    /**
     * A short and descriptive title of the HIT. Must not be longer than 128
     * characters.
     */
    private String title;

    /**
     * A detailed description of the kind of task the HIT contains. Must not be
     * longer than 2000 characters.
     */
    private String description;

    /**
     * The questions that will be posed to the worker.
     */
    private List<Question> questions;

    /**
     * A map of the questions. This can be used to find questions faster.
     * Key: The unique identifier of the question.
     * Value: The question itself.
     */
    private Map<String, Question> questionsMap;

    /**
     * An amount of time, in seconds, after which the HIT is no longer available
     * for users to accept. After the lifetime of the HIT elapses, the HIT no
     * longer appears in HIT searches, even if not all of the assignments for
     * the HIT have been accepted. Must be >= 30 (30 seconds) and <= 31536000
     * (365 days).
     */
    private int lifetimeInSeconds;

    /**
     * The number of times the HIT can be accepted and completed before the HIT
     * becomes unavailable. Must be positive.
     */
    private int maxAssignments;

    /**
     * The amount of money we will pay to the worker. Must be positive.
     */
    private float rewardInUSD;

    /**
     * The amount of time that a Worker has to complete the HIT after accepting
     * it. Must be >= 30 (30 seconds) and <= 31536000 (365 days).
     */
    private int assignmentDurationInSeconds;

    /**
     * One or more words or phrases that describe the HIT. This is used in
     * searches to find HITs.
     */
    private List<String> keywords;

    /**
     * The ID of the HIT as generated by AMT.
     */
    private String hitId;

    /**
     * Creates a new HIT.
     *
     * @param titleArg
     *            A short and descriptive title of the HIT. Must not be longer
     *            than 128 characters.
     * @param descriptionArg
     *            A detailed description of the kind of task the HIT contains.
     *            Must not be longer than 2000 characters.
     * @param questionsArg
     *            The questions that will be posed to the worker.
     * @param lifetimeInSecondsArg
     *            An amount of time, in seconds, after which the HIT is no
     *            longer available for users to accept. Must be >= 30 (30
     *            seconds) and <= 31536000 (365 days).
     * @param maxAssignmentsArg
     *            The number of times the HIT can be accepted and completed
     *            before the HIT becomes unavailable. Must be positive.
     * @param rewardArg
     *            The amount of time that a Worker has to complete the HIT after
     *            accepting it. Must be >= 30 (30 seconds) and <= 31536000 (365
     *            days).
     * @param assignmentDurationInSecondsArg
     *            The amount of time that a Worker has to complete the HIT after
     *            accepting it. Must be >= 30 (30 seconds) and <= 31536000 (365
     *            days).
     * @param keywordsArg
     *            One or more words or phrases that describe the HIT. This is
     *            used in searches to find HITs.
     */
    public HIT(String titleArg,
            String descriptionArg, List<Question> questionsArg,
            int lifetimeInSecondsArg, int maxAssignmentsArg, float rewardInUSDArg,
            int assignmentDurationInSecondsArg, List<String> keywordsArg) {
        this.questions = questionsArg;
        this.lifetimeInSeconds = lifetimeInSecondsArg;
        this.maxAssignments = maxAssignmentsArg;
        this.title = titleArg;
        this.description = descriptionArg;
        this.rewardInUSD = rewardInUSDArg;
        this.assignmentDurationInSeconds = assignmentDurationInSecondsArg;
        this.keywords = keywordsArg;
        this.questionsMap = new HashMap<String, Question>();
        for (Question q : questionsArg) {
            questionsMap.put(q.getIdentifier(), q);
        }
    }

    /**
     * Return a XML document corresponding to the QuestionForm for this HIT.
     * @return The QuestionForm representation of this HIT.
     */
    public Document asXMLDocument() {
        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder;
        try {
            docBuilder = docFactory.newDocumentBuilder();
        } catch (ParserConfigurationException e) {
            throw new RuntimeException("Could not initialize document builder: "
                    + e.toString());
        }
        Document doc = docBuilder.newDocument();

        Element questionForm = doc.createElement("QuestionForm");
        questionForm.setAttribute("xmlns",
                "http://mechanicalturk.amazonaws.com/AWSMechanicalTurkDataSchemas/2005-10-01/QuestionForm.xsd");

        for (Question q: this.questions) {
            Element question = q.asXMLElement(doc);
            questionForm.appendChild(question);
        }
        doc.appendChild(questionForm);
        return doc;
    }

    /**
     * @return the autoApprovalDelayInSeconds
     */
    public static int getAutoApprovalDelayInSeconds() {
        return AUTO_APPROVAL_DELAY_IN_SECONDS;
    }

    /**
     * @return the title
     */
    public String getTitle() {
        return title;
    }

    /**
     * @return the description
     */
    public String getDescription() {
        return description;
    }

    /**
     * @return the questions
     */
    public List<Question> getQuestions() {
        return questions;
    }

    /**
     * @return the questionsMap
     */
    public Map<String, Question> getQuestionsMap() {
        return questionsMap;
    }

    /**
     * @return the lifetimeInSeconds
     */
    public int getLifetimeInSeconds() {
        return lifetimeInSeconds;
    }

    /**
     * @return the maxAssignments
     */
    public int getMaxAssignments() {
        return maxAssignments;
    }

    /**
     * @return the rewardInUSD
     */
    public float getRewardInUSD() {
        return rewardInUSD;
    }

    /**
     * @return the assignmentDurationInSeconds
     */
    public int getAssignmentDurationInSeconds() {
        return assignmentDurationInSeconds;
    }

    /**
     * @return the keywords
     */
    public List<String> getKeywords() {
        return keywords;
    }

    public void setHITId(String hITId) {
        hitId = hITId;
    }

    /**
     * @return the HITId as generated by AMT
     */
    public String getHITId() {
        return hitId;
    }
}
